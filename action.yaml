# action.yaml
name: 'EC2 Spot Runner'
description: 'A GitHub Action that spin a new EC2 and register as a self-runner to execute workflows.'
inputs:
  ec2_ami:
    description: 'Defines the AMI to use.'
    type: string
  ec2_instance_type:
    description: 'Defines the EC2 Instance Type'
    type: string
  ec2_subnet_id:
    description: 'Defines the Subnet ID'
  ec2_security_group:
    description: 'Defines the Security group to attach on the EC2'
  ec2_iam_instance_role:
    description: 'The role to be used on the EC2'
  mode:
    description: 'The execution mode. start,stop'
    default: "start"
    type: string
  ec2_instance_id:
    description: 'For stop execution mode, the EC2 to be stopped.'
    type: string
  github_token:
    description: 'The GH token to register the EC2 as a runner'
    required: true
    type: string
  github_repo:
    type: string
  github_org:
    type: string
  job_name:
    type: string
  job_id:
    type: string
  python_version:
    type: string
    default: "3.12"
  ec2_instance_ttl:
    description: 'EC2 maximum execution time'
    default: 60
outputs:
  label:
    description: 'Label output'
    value: ${{ steps.generate-label.outputs.label }}
runs:
  using: 'composite'
  steps:
    - name: Set installation directory
      id: set-installation-directory
      shell: bash
      env:
        PYTHON_VERSION: ${{ inputs.python_version }}
      run: |
        echo "installation_directory=${HOME}/.setup-python-amazon-linux/.python-versions/$PYTHON_VERSION" | tee -a "${GITHUB_OUTPUT}"

    - id: setup-python
      shell: bash
      env:
        PYTHON_VERSION: ${{ inputs.python_version }}
      run: |
        installation_directory="${{ steps.set-installation-directory.outputs.installation_directory }}"

        uv venv --python "$PYTHON_VERSION" "${installation_directory}"

    - name: Add python to PATH
      shell: bash
      run: |
        installation_directory="${{ steps.set-installation-directory.outputs.installation_directory }}"
        echo "${installation_directory}/bin" >> "${GITHUB_PATH}"

        echo "The following python binaries are now available in the PATH"
        ls "${installation_directory}/bin"

    - name: Install pip
      shell: bash
      run: |
        installation_directory="${{ steps.set-installation-directory.outputs.installation_directory }}"

        python -m ensurepip --upgrade
        ln -sf "${installation_directory}/bin/pip3" "${installation_directory}/bin/pip"
        pip install --upgrade pip
    - name: Install Dependencies
      shell: bash
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install boto3==1.34.149
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
    - name: Get runner token
      id: get-token
      shell: bash
      env:
        TOKEN: ${{ inputs.github_token }}
        GH_ORG: ${{ inputs.github_org }}
        GH_REPO: ${{ inputs.github_repo }}
      run: |
        RUNNER=$(curl -s -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$GH_REPO/actions/runners/registration-token | jq -r .token)
        echo "${RUNNER:0:4}***"
        echo "token_runner=$RUNNER" >> "$GITHUB_OUTPUT"
    - name: Generate Label
      id: generate-label
      shell: bash
      env:
        LBL: ${{ inputs.runner_labels }}
      run: |
        timestamp=$(date +%s)
        _LBL=${LBL##*/}
        echo label=$_LBL-$timestamp
        echo "label=$_LBL-$timestamp" >> "$GITHUB_OUTPUT" 
    - name: Pass Inputs to Shell
      shell: bash
      run: |
              echo "AMI_ID=${{ inputs.ec2_ami }}" >> $GITHUB_ENV
              echo "INSTANCE_TYPE=${{ inputs.ec2_instance_type }}" >> $GITHUB_ENV
              echo "SUBNET_ID=${{ inputs.ec2_subnet_id }}" >> $GITHUB_ENV
              echo "SECURITY_GROUP=${{ inputs.ec2_security_group }}" >> $GITHUB_ENV
              echo "IAM_ROLE_NAME=${{ inputs.ec2_iam_instance_role }}" >> $GITHUB_ENV
              echo "ACTION=${{ inputs.mode }}" >> $GITHUB_ENV
              echo "GITHUB_TOKEN=${{ steps.get-token.outputs.token_runner }}" >> $GITHUB_ENV
              echo "MAX_EXEC=${{ inputs.ec2_instance_ttl }}" >> $GITHUB_ENV
              echo "JOB_ID=${{ inputs.job_id }}" >> $GITHUB_ENV
              echo "GITHUB_ORG=${{ inputs.github_org }}" >> $GITHUB_ENV
              echo "GITHUB_REPO=${{ inputs.github_repo }}" >> $GITHUB_ENV
              echo "GITHUB_RUNNER_LABELS=${{ steps.generate-label.outputs.label }}" >> $GITHUB_ENV
    - name: Create EC2/Runner
      id: create-ec2-runner
      run: echo "ec2_instance_id=$(python ${GITHUB_ACTION_PATH}/scripts/ec2.py)" >> "$GITHUB_OUTPUT" 
      shell: bash

      